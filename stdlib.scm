(set! list (lambda x x))
(set! define
  (syntax (form . values)
    (if (symbol? form)
        (list 'set! form (car values))
        (list 'set! (car form) (cons 'lambda (cons (cdr form) values))))))
(define and
  (syntax l
    (if (null? l)
        #t
        (if (null? (cdr l))
            (car l)
            (list 'if (car l) (cons 'and (cdr l)) #f)))))
(define (bindings->formals bindings)
  (if (null? bindings)
      '()
      (cons (car (car bindings)) (bindings->formals (cdr bindings)))))
(define (bindings->values bindings)
  (if (null? bindings)
      '()
      (cons (car (cdr (car bindings))) (bindings->values (cdr bindings)))))
(define let
  (syntax (bindings . body)
    (cons (cons 'lambda (cons (bindings->formals bindings) body)) 
          (bindings->values bindings))))
(define or
  (syntax l
    (if (null? l)
        #f
        (if (null? (cdr l))
            (car l)
            (let ((s (gensym)))
              (list 'let (list (list s (car l)))
                    (list 'if s s (cons 'or (cdr l)))))))))
(define let*
  (syntax (bindings . body)
    (if (null? bindings)
        (cons 'let (cons '() body))
        (list 'let 
              (list (car bindings)) 
              (cons 'let* (cons (cdr bindings) body))))))
(define (caaaar x) (car (car (car (car x)))))
(define (caaadr x) (car (car (car (cdr x)))))
(define (caadar x) (car (car (cdr (car x)))))
(define (caaddr x) (car (car (cdr (cdr x)))))
(define (cadaar x) (car (cdr (car (car x)))))
(define (cadadr x) (car (cdr (car (cdr x)))))
(define (caddar x) (car (cdr (cdr (car x)))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))
(define (cdaaar x) (cdr (car (car (car x)))))
(define (cdaadr x) (cdr (car (car (cdr x)))))
(define (cdadar x) (cdr (car (cdr (car x)))))
(define (cdaddr x) (cdr (car (cdr (cdr x)))))
(define (cddaar x) (cdr (cdr (car (car x)))))
(define (cddadr x) (cdr (cdr (car (cdr x)))))
(define (cdddar x) (cdr (cdr (cdr (car x)))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))
(define (caaar x) (car (car (car x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))
(define (cdaar x) (cdr (car (car x))))
(define (cdadr x) (cdr (car (cdr x))))
(define (cddar x) (cdr (cdr (car x))))
(define (cdddr x) (cdr (cdr (cdr x))))
(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))
(define (reverse l)
  (define (reverse-iter l acc)
    (if (null? l)
        acc
        (reverse-iter (cdr l) (cons (car l) acc))))
  (reverse-iter l '()))
(define (append-2 a b)
  (define (append-2-rev a b)
    (if (null? a)
        b
        (append-2 (cdr a) (cons (car a) b))))
  (append-2-rev (reverse a) b))
(define (bindings->unbounds bindings)
  (if (null? bindings)
      '()
      (cons (list (car (car bindings)) '(unbound))
            (bindings->unbounds (cdr bindings)))))
(define (bindings->set! bindings)
  (if (null? bindings)
      '()
      (cons (list 'set! (car (car bindings)) (car (cdr (car bindings))))
            (bindings->set! (cdr bindings)))))
(define letrec
  (syntax (bindings . body)
    (append-2 '(let)
              (cons (bindings->unbounds bindings)
                    (append-2 (bindings->set! bindings)
                              body)))))
